<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE statemachine SYSTEM "http://quanta.kdewebdev.org/download/statemachine.dtd">

<statemachine version="1.0">
<!-- Main parsing -->
  <state name="begin" endOfDocument="">
    <condition name="equals" argument="&lt;" nextState="ltFound">
      <action name="startTag" />
    </condition>
    <condition name="isWhiteSpace" nextState="begin" />
    <condition name="isAnyChar" nextState="startText">
      <action name="pushBackChar" />
      <action name="pushState" argument="begin" />
    </condition>
  </state>

  <state name="ltFound" endOfDocument="">
    <condition name="isWhiteSpace" nextState="ltFound" >
      <action name="reportError" message="Whitespace cannot follow the &lt;."/>
    </condition>
    <condition name="equals" argument="&lt;" nextState="ltFound">
      <action name="reportError" message="&lt; cannot follow &lt;."/>
      <action name="startTag" />
    </condition>
    <condition name="equals" argument="!" nextState="emFound" />
    <condition name="equals" argument="?" nextState="gotoPI" />
    <condition name="equals" argument="-" nextState="gotoClosingElement" />
    <condition name="equals" argument="/" nextState="closingElement" >
      <action name="pushState" argument="begin" />
    </condition>
    <condition name="isCharacter" nextState="startElement">
      <action name="addToTagName" />
      <action name="pushState" argument="begin" />
    </condition>
    <condition name="isAnyChar" nextState="startElement" >
      <action name="reportError" message="Invalid character after &lt;." />
      <action name="addToTagName" />
      <action name="pushState" argument="begin" />
    </condition>
  </state>

  <state name="emFound" endOfDocument="">
    <condition name="equals" argument="-" nextState="startComment">
      <action name="pushState" argument="begin" />
    </condition>
    <condition name="equals" argument="D" nextState="startDocType" >
      <action name="addCharToBuffer" />
      <action name="pushState" argument="begin" />
    </condition>
    <condition name="isAnyChar" nextState="startElement" >
      <action name="reportError" message="Invalid character after &lt;! ." />
      <action name="addToTagName" />
      <action name="pushState" argument="begin" />
    </condition>
  </state>

<!-- Comment parsing sub-state machine -->
  <state name="startComment" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="addStringToBuffer" argument="!-" />
      <action name="createTag" />
      <action name="popState" />
    </condition>
    <condition name="equals" argument="-" nextState="commentString"/>
    <condition name="isAnyChar" nextState="commentString">
      <action name="reportError" message="Possible comment does not start with &lt;-- ."/>
    </condition>
  </state>

  <state name="commentString" endOfDocument="">
    <condition name="equals" argument="-" nextState="firstDashFound" />
    <condition name="isAnyChar" nextState="commentString">
      <action name="addCharToBuffer" />
    </condition>
  </state>

  <state name="firstDashFound" endOfDocument="">
    <condition name="equals" argument="-" nextState="secondDashFound" />
    <condition name="equals" argument=">" nextState="commentString">
      <action name="reportWarning" message="Wrong end of comment?" />
      <action name="addStringToBuffer" argument="->" />
    </condition>
    <condition name="isAnyChar" nextState="commentString">
      <action name="addStringToBuffer" argument="-" />
      <action name="addCharToBuffer" />
    </condition>
  </state>

  <state name="secondDashFound" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createComment" />
      <action name="popState" />
    </condition>
    <condition name="equals" argument="-" nextState="secondDashFound">
      <action name="addCharToBuffer" />
      <action name="reportWarning" message="Adjacent hyphens wihtin comment." />
    </condition>
    <condition name="isAnyChar" nextState="commentString">
      <action name="addStringToBuffer" argument="--" />
      <action name="addCharToBuffer" />
    </condition>
  </state>

<!-- Text parsing state machine -->
  <state name="startText" endOfDocument="">
    <condition name="equals" argument="&amp;" nextState="startEntity" >
      <action name="addCharToBuffer" />
      <action name="pushState" argument="startText" />
    </condition>
    <condition name="equals" argument="&lt;" nextState="">
      <action name="createText" />
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
    <condition name="isAnyChar" nextState="startText">
      <action name="addCharToBuffer" />
    </condition>
  </state>

<!-- Entity parsing state machine -->
  <state name="startEntity" endOfDocument="">
    <condition name="equals" argument=";" nextState="">
      <action name="createEntity" />
      <action name="addCharToBuffer" />
      <action name="popState" />
    </condition>
    <condition name="isWhiteSpace" nextState="">
      <action name="addCharToBuffer" />
      <action name="popState" />
    </condition>
    <condition name="isAnyChar" nextState="startEntity" >
      <action name="addCharToBuffer" />
    </condition>
  </state>

<!-- DocType parsing state machine (incomplete) -->
  <state name="startDocType" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createTag" />
      <action name="popState" />
    </condition>
    <condition name="isAnyChar" nextState="">
      <action name="addCharToBuffer"/>
    </condition>
  </state>

<!--   Double quoted string parsing state machine -->
  <state name="startQuotedString" endOfDocument="">
    <condition name="equals" argument="&#034;" nextState="">
      <action name="popState" />
    </condition>
    <condition name="equals" argument="&amp;" nextState="startEntity">
      <action name="addCharToBuffer" />
      <action name="pushState" argument="startQuotedString" />
    </condition>
    <condition name="equals" argument="\" nextState="slashFound">
      <action name="addCharToBuffer" />
      <action name="pushState" argument="startQuotedString"/>
    </condition>
    <condition name="isAnyChar" nextState="startQuotedString" >
      <action name="addCharToBuffer" />
    </condition>
  </state>

<!--   Single quoted string parsing state machine -->
  <state name="startSingleQuotedString" endOfDocument="">
    <condition name="equals" argument="'" nextState="">
      <action name="popState" />
    </condition>
    <condition name="equals" argument="&amp;" nextState="startEntity">
      <action name="addCharToBuffer" />
      <action name="pushState" argument="startSingleQuotedString" />
    </condition>
    <condition name="equals" argument="\" nextState="slashFound">
      <action name="addCharToBuffer" />
      <action name="pushState" argument="startSingleQuotedString"/>
    </condition>
    <condition name="isAnyChar" nextState="startSingleQuotedString" >
      <action name="addCharToBuffer" />
    </condition>
  </state>

<!--   Entered when a character after a slash should be ignored -->
  <state name="slashFound" endOfDocument="">
    <condition name="isAnyChar" nextState="">
      <action name="addCharToBuffer" />
      <action name="popState" />
    </condition>
  </state>


<!-- Element (tag) parsing state machine. It consists of several sub-state machines. -->
  <!-- Parse the tag name and deal with tag creation -->
  <state name="startElement" endOfDocument="" >
    <condition name="equals" argument=">" nextState="" >
      <action name="createTag" />
      <action name="quickParseSpecial" />
    </condition>
    <condition name="equals" argument="&lt;" nextState="" >
      <action name="reportError" message="&gt; not found at the end of the tag."/>
      <action name="createTag"/>
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
    <condition name="isWhiteSpace" nextState="searchAttribute">
      <action name="pushState" argument="tagEnded" />
    </condition>
    <condition name="equals" argument=":" nextState="startElement">
      <action name="rememberNameSpace" />
    </condition>
    <condition name="isAnyChar" nextState="startElement">
      <action name="addToTagName"/>
    </condition>
  </state>

  <state name="tagEnded" endOfDocument="">
    <condition name="equals" argument="/" nextState="slashInTag" />
    <condition name="equals" argument="&lt;" nextState="">
      <action name="reportError" message="&gt; not found at the end of the tag."/>
      <action name="createTag"/>
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
    <condition name="isAnyChar" nextState="">
      <action name="createTag" />
      <action name="quickParseSpecial" /> <!-- acts as a popState as well -->
    </condition>
  </state>

  <state name="slashInTag" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createEndTag" />
      <action name="popState" />
    </condition>
    <condition name="equals" argument="&lt;" nextState="">
      <action name="reportError" message="&gt; not found at the end of the tag."/>
      <action name="createTag"/>
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
    <condition name="isAnyChar" nextState="">
      <action name="addToAttributeName" argument="/" />
      <action name="reportError" message="/ is invalid in attribute name." />
      <action name="pushBackChar" />
      <action name="pushState" argument="tagEnded" />
    </condition>
  </state>

  <!-- Parse the attribute name -->
  <state name="searchAttribute" endOfDocument="">
    <condition name="isWhiteSpace" nextState="searchAttribute" />
    <condition name="containedIn" argument=">/&lt;" nextState="">
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
    <condition name="equals" argument="=" nextState="attributeValue">
      <action name="reportError" message="Attribute value starts without an attribute name." />
      <action name="pushState" argument="attrValueComplete" />
    </condition>
    <condition name="isCharacter" nextState="startAttribute">
      <action name="addToAttributeName" />
    </condition>
    <condition name="isAnyChar" nextState="startAttribute">
      <action name="reportError" message="Attribute name does not start with a a letter."/>
      <action name="addToAttributeName" />
    </condition>
  </state>

  <state name="startAttribute" endOfDocument="">
    <condition name="containedIn" argument=">&lt;" nextState="">
      <action name="reportError" message="Attribute ends without a value." />
      <action name="createAttribute" />
      <action name="pushBackChar" />
      <action name="popState"/>
    </condition>
    <condition name="equals" argument="/" nextState="">
      <action name="pushBackChar" />
      <action name="popState"/>
    </condition>
    <condition name="equals" argument="=" nextState="attributeValue" >
      <action name="pushState" argument="attrValueComplete" />
    </condition>
    <condition name="equals" argument="&#034;" nextState="startQuotedString">
      <action name="reportError" message="Assignment operator missing between attribute name and value." />
      <action name="pushState" argument="endAttributeValue" />
    </condition>
    <condition name="isWhiteSpace" nextState="wspAfterAttrName" />
    <condition name="isAnyChar" nextState="startAttribute">
      <action name="addToAttributeName" />
    </condition>
  </state>

  <state name="wspAfterAttrName" endOfDocument="">
    <condition name="isWhiteSpace" nextState="wspAfterAttrName" />
    <condition name="containedIn" argument=">&lt;" nextState="">
      <action name="reportError" message="Attribute ends without a value." />
      <action name="createAttribute" />
      <action name="pushBackChar" />
      <action name="popState"/>
    </condition>
    <condition name="equals" argument="=" nextState="attributeValue" >
      <action name="pushState" argument="attrValueComplete" />
    </condition>
    <condition name="isAnyChar" nextState="searchAttribute">
      <action name="createAttribute" />
      <action name="pushBackChar" />
    </condition>
  </state>

  <state name="attrValueComplete" endOfDocument="">
    <condition name="containedIn" argument=">&lt;" nextState="" >
      <action name="pushBackChar" />
      <action name="popState"/>
    </condition>
    <condition name="isAnyChar" nextState="searchAttribute">
      <action name="pushBackChar" />
    </condition>
  </state>

  <!-- Attribute value parser -->
  <state name="attributeValue" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="reportError" message="Attribute ends without a value." />
      <action name="createAttribute" />
      <action name="pushBackChar" />
      <action name="popState"/>
    </condition>
    <condition name="isWhiteSpace" nextState="attributeValue" />
    <condition name="equals" argument="&#034;" nextState="startQuotedString" >
      <action name="pushState" argument="endAttributeValue" />
    </condition>
    <condition name="isAnyChar" nextState="notQuotedAttributeValue" >
      <action name="addCharToBuffer" />
    </condition>
  </state>

  <state name="notQuotedAttributeValue" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createAttribute" />
      <action name="pushBackChar" />
      <action name="popState"/>
   </condition>
    <condition name="isWhiteSpace" nextState="endAttributeValue" />
    <condition name="equals" argument="&#034;" nextState="notQuotedAttributeValue">
      <action name="addCharToBuffer" />
      <action name="reportError" message="Quotation mark found inside attribute value." />
    </condition>
    <condition name="isAnyChar" nextState="notQuotedAttributeValue">
      <action name="addCharToBuffer" />
    </condition>
  </state>

  <state name="endAttributeValue" endOfDocument="">
    <condition name="isAnyChar" nextState="">
      <action name="createAttribute" />
      <action name="pushBackChar" />
      <action name="popState"/>
   </condition>
  </state>

<!-- Closing XML tag parser -->
  <state name="closingElement" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createEndTag" />
      <action name="reportError" message="Empty closing element." />
      <action name="popState" />
    </condition>
    <condition name="isWhiteSpace" nextState="closingElement">
      <action name="reportError" message="Closing element starts with whitespace." />
    </condition>
    <condition name="isCharacter" nextState="closingElementName">
      <action name="addToTagName" />
    </condition>
    <condition name="isAnyChar" nextState="closingElementName">
      <action name="reportError" message="Invalid character in element name." />
      <action name="addToTagName" />
   </condition>
  </state>

  <state name="closingElementName" endOfDocument="">
    <condition name="equals" argument=">" nextState="">
      <action name="createEndTag" />
      <action name="popState" />
    </condition>
    <condition name="isWhiteSpace" nextState="closingElementSkip"/>
    <condition name="equals" argument=":" nextState="closingElementName">
      <action name="rememberNameSpace" />
    </condition>
    <condition name="isAnyChar" nextState="closingElementName">
      <action name="addToTagName" />
    </condition>
 </state>

 <state name="closingElementSkip" endOfDocument="">
   <condition name="equals" argument=">" nextState="">
     <action name="createEndTag" />
     <action name="popState" />
   </condition>
   <condition name="isAnyChar" nextState="closingElementSkip" />
 </state>

 <!-- <state name="en...." endOfDocument="">
    <condition name="isAnyChar" nextState="">
      <action name=""/>
    </condition>
  </state>

  <state name="checkSpecialTag">
    <condition name="isSpecialTag" >
      <action name="parseSpecialTag" />
    </condition>
    <condition name="isAnyChar" >
      <action name="pushBackChar" />
      <action name="popState" />
    </condition>
  </state>-->



</statemachine>